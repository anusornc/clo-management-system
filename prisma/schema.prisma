// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole  @default(USER)
  department    String?

  accounts        Account[]
  sessions        Session[]
  courses         Course[]
  documentVersions DocumentVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id            String  @id @default(cuid())
  code          String  @unique
  nameEn        String
  nameTh        String
  descriptionEn String?
  descriptionTh String?
  credits       Int
  faculty       String?
  department    String?
  prerequisites String?
  corequisites  String?

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  documentVersions DocumentVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentVersion {
  id        String         @id @default(cuid())
  version   Int
  status    DocumentStatus @default(DRAFT)
  courseId  String
  course    Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  clos                CLO[]
  teachingMethods     TeachingMethod[]
  assessmentMethods   AssessmentMethod[]
  cloPlomappings      CLOPLOMapping[]
  cloTeachingMethods  CLOTeachingMethod[]
  cloAssessmentMethods CLOAssessmentMethod[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DocumentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model CLO {
  id            String  @id @default(cuid())
  number        Int
  descriptionEn String
  descriptionTh String
  bloomLevel    String

  documentVersionId String
  documentVersion   DocumentVersion @relation(fields: [documentVersionId], references: [id], onDelete: Cascade)

  cloPlomappings      CLOPLOMapping[]
  cloTeachingMethods  CLOTeachingMethod[]
  cloAssessmentMethods CLOAssessmentMethod[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PLO {
  id            String  @id @default(cuid())
  codeEn        String
  codeTh        String
  descriptionEn String
  descriptionTh String
  program       String

  cloPlomappings CLOPLOMapping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeachingMethod {
  id     String @id @default(cuid())
  nameEn String
  nameTh String

  documentVersionId String
  documentVersion   DocumentVersion @relation(fields: [documentVersionId], references: [id], onDelete: Cascade)

  cloTeachingMethods CLOTeachingMethod[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AssessmentMethod {
  id     String  @id @default(cuid())
  nameEn String
  nameTh String
  weight Float

  documentVersionId String
  documentVersion   DocumentVersion @relation(fields: [documentVersionId], references: [id], onDelete: Cascade)

  cloAssessmentMethods CLOAssessmentMethod[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CLOPLOMapping {
  id       String       @id @default(cuid())
  strength MappingStrength @default(NONE)

  cloId String
  clo   CLO    @relation(fields: [cloId], references: [id], onDelete: Cascade)

  ploId String
  plo   PLO    @relation(fields: [ploId], references: [id], onDelete: Cascade)

  documentVersionId String
  documentVersion   DocumentVersion @relation(fields: [documentVersionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cloId, ploId])
}

enum MappingStrength {
  NONE
  LOW
  MEDIUM
  HIGH
}

model CLOTeachingMethod {
  id    String @id @default(cuid())
  used  Boolean @default(false)

  cloId String
  clo   CLO    @relation(fields: [cloId], references: [id], onDelete: Cascade)

  methodId String
  method   TeachingMethod @relation(fields: [methodId], references: [id], onDelete: Cascade)

  documentVersionId String
  documentVersion   DocumentVersion @relation(fields: [documentVersionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cloId, methodId])
}

model CLOAssessmentMethod {
  id         String @id @default(cuid())
  percentage Float  @default(0)

  cloId String
  clo   CLO    @relation(fields: [cloId], references: [id], onDelete: Cascade)

  methodId String
  method   AssessmentMethod @relation(fields: [methodId], references: [id], onDelete: Cascade)

  documentVersionId String
  documentVersion   DocumentVersion @relation(fields: [documentVersionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cloId, methodId])
}

